CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

CREATE TABLE USUARIO (
                         ID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
                         NOME VARCHAR(100) NOT NULL,
                         EMAIL VARCHAR(255) NOT NULL UNIQUE,
                         SENHA VARCHAR(255) NOT NULL,
                         FOTO_PERFIL VARCHAR(255),
                         BIO TEXT,
                         CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                         UPDATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE POST (
                      ID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
                      USUARIO_ID UUID NOT NULL,
                      TITULO VARCHAR(255) NOT NULL,
                      CONTEUDO TEXT NOT NULL,
                      DATA_PUBLICACAO TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                      PUBLICADO BOOLEAN NOT NULL DEFAULT FALSE,
                      CAPA_IMAGEM VARCHAR(255),
                      CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                      UPDATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                      FOREIGN KEY (USUARIO_ID) REFERENCES USUARIO(ID) ON DELETE CASCADE
);

CREATE TABLE COMENTARIO (
                            ID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
                            POST_ID UUID NOT NULL,
                            USUARIO_ID UUID NOT NULL,
                            CONTEUDO TEXT NOT NULL,
                            DATA_COMENTARIO TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                            CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                            UPDATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                            FOREIGN KEY (POST_ID) REFERENCES POST(ID) ON DELETE CASCADE,
                            FOREIGN KEY (USUARIO_ID) REFERENCES USUARIO(ID) ON DELETE CASCADE
);

CREATE TABLE CURTIDA (
                         ID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
                         POST_ID UUID NOT NULL,
                         USUARIO_ID UUID NOT NULL,
                         DATA_CURTIDA TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                         CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                         UPDATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                         FOREIGN KEY (POST_ID) REFERENCES POST(ID) ON DELETE CASCADE,
                         FOREIGN KEY (USUARIO_ID) REFERENCES USUARIO(ID) ON DELETE CASCADE,
                         UNIQUE (POST_ID, USUARIO_ID)
);

CREATE TABLE FAVORITO (
                          ID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
                          POST_ID UUID NOT NULL,
                          USUARIO_ID UUID NOT NULL,
                          DATA_FAVORITADO TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                          CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                          UPDATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                          FOREIGN KEY (POST_ID) REFERENCES POST(ID) ON DELETE CASCADE,
                          FOREIGN KEY (USUARIO_ID) REFERENCES USUARIO(ID) ON DELETE CASCADE,
                          UNIQUE (POST_ID, USUARIO_ID)
);

CREATE TABLE SEGUIDOR (
                          ID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
                          SEGUIDOR_ID UUID NOT NULL,
                          SEGUIDO_ID UUID NOT NULL,
                          DATA_SEGUIMENTO TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                          CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                          UPDATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                          FOREIGN KEY (SEGUIDOR_ID) REFERENCES USUARIO(ID) ON DELETE CASCADE,
                          FOREIGN KEY (SEGUIDO_ID) REFERENCES USUARIO(ID) ON DELETE CASCADE,
                          UNIQUE (SEGUIDOR_ID, SEGUIDO_ID),
                          CHECK (SEGUIDOR_ID != SEGUIDO_ID)
    );

CREATE TABLE TAG (
                     ID UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
                     NOME VARCHAR(50) NOT NULL UNIQUE,
                     CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                     UPDATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE POST_TAG (
                          POST_ID UUID NOT NULL,
                          TAG_ID UUID NOT NULL,
                          CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                          UPDATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                          PRIMARY KEY (POST_ID, TAG_ID),
                          FOREIGN KEY (POST_ID) REFERENCES POST(ID) ON DELETE CASCADE,
                          FOREIGN KEY (TAG_ID) REFERENCES TAG(ID) ON DELETE CASCADE
);

-- ÍNDICES
CREATE INDEX IDX_POST_USUARIO ON POST(USUARIO_ID);
CREATE INDEX IDX_COMENTARIO_POST ON COMENTARIO(POST_ID);
CREATE INDEX IDX_COMENTARIO_USUARIO ON COMENTARIO(USUARIO_ID);
CREATE INDEX IDX_CURTIDA_POST ON CURTIDA(POST_ID);
CREATE INDEX IDX_CURTIDA_USUARIO ON CURTIDA(USUARIO_ID);
CREATE INDEX IDX_FAVORITO_POST ON FAVORITO(POST_ID);
CREATE INDEX IDX_FAVORITO_USUARIO ON FAVORITO(USUARIO_ID);
CREATE INDEX IDX_SEGUIDOR_SEGUIDOR ON SEGUIDOR(SEGUIDOR_ID);
CREATE INDEX IDX_SEGUIDOR_SEGUIDO ON SEGUIDOR(SEGUIDO_ID);
CREATE INDEX IDX_POST_TAG_POST ON POST_TAG(POST_ID);
CREATE INDEX IDX_POST_TAG_TAG ON POST_TAG(TAG_ID);

-- TRIGGERS E FUNÇÕES
CREATE OR REPLACE FUNCTION TRIGGER_SET_TIMESTAMP()
RETURNS TRIGGER AS $$
BEGIN
    NEW.UPDATED_AT = NOW();
RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER SET_TIMESTAMP_USUARIO
    BEFORE UPDATE ON USUARIO
    FOR EACH ROW
    EXECUTE FUNCTION TRIGGER_SET_TIMESTAMP();

CREATE TRIGGER SET_TIMESTAMP_POST
    BEFORE UPDATE ON POST
    FOR EACH ROW
    EXECUTE FUNCTION TRIGGER_SET_TIMESTAMP();

CREATE TRIGGER SET_TIMESTAMP_COMENTARIO
    BEFORE UPDATE ON COMENTARIO
    FOR EACH ROW
    EXECUTE FUNCTION TRIGGER_SET_TIMESTAMP();

CREATE TRIGGER SET_TIMESTAMP_CURTIDA
    BEFORE UPDATE ON CURTIDA
    FOR EACH ROW
    EXECUTE FUNCTION TRIGGER_SET_TIMESTAMP();

CREATE TRIGGER SET_TIMESTAMP_FAVORITO
    BEFORE UPDATE ON FAVORITO
    FOR EACH ROW
    EXECUTE FUNCTION TRIGGER_SET_TIMESTAMP();

CREATE TRIGGER SET_TIMESTAMP_SEGUIDOR
    BEFORE UPDATE ON SEGUIDOR
    FOR EACH ROW
    EXECUTE FUNCTION TRIGGER_SET_TIMESTAMP();

CREATE TRIGGER SET_TIMESTAMP_TAG
    BEFORE UPDATE ON TAG
    FOR EACH ROW
    EXECUTE FUNCTION TRIGGER_SET_TIMESTAMP();

CREATE TRIGGER SET_TIMESTAMP_POST_TAG
    BEFORE UPDATE ON POST_TAG
    FOR EACH ROW
    EXECUTE FUNCTION TRIGGER_SET_TIMESTAMP();